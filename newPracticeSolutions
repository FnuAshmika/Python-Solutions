#Happy Number
class Solution:
    def isHappy(self, n: int) -> bool:
        def get_next(num):
            result = 0
            while num > 0:
                result += (num%10)**2
                num //= 10
            return result
        seen = set()
        while n != 1 and n not in seen:
            seen.add(n)
            n= get_next(n)
        return n==1
      
#sliding window
from collections import deque
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        result = []
        window = deque()

        for i, num in enumerate(nums):
            while window and window[0] < i - k + 1:
                window.popleft()
            while window and nums[window[-1]] < num:
                window.pop()
            window.append(i)
            if i >= k - 1:
                result.append(nums[window[0]])

        return result
#subarray with maxsum
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        if not nums:
            return 0
        current_sum = max_sum = nums[0]
        for num in nums[1:]:
            current_sum = max(num, current_sum+num)
            max_sum = max(current_sum, max_sum)
        return max_sum
